head	1.5;
access;
symbols;
locks
	marceloddm:1.5; strict;
comment	@ * @;


1.5
date	2005.02.16.22.11.21;	author marceloddm;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.20.12.37.13;	author marceloddm;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.18.02.00.13;	author marceloddm;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.17.12.09.03;	author marceloddm;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.16.00.09.12;	author marceloddm;	state Exp;
branches;
next	;


desc
@This function is used to edit data from the given user ID.
NOTE: this function DOES NOT CHANGE THE USER's ID, CATEGORY, PASSWORD OR USERNAME
@


1.5
log
@CGI's added
@
text
@//=================================================================//
// Universidade Federal do Rio de Janeiro
// Escola Politécnica
// Departamento de Eletrônica e de Computação
// Professor Marcelo Luiz Drumond Lanza
// Computation II - Class 2004/2
// Authors: Carlo Fragni and Marcelo Duffles Donato Moreira 
// Description: editUserData() primary function source file 
// Date: 15/12/2004
//=================================================================//

/* 
 * RCS COMMENTS
 *
 * $Date: 2004/12/20 12:37:13 $
 * $Log: editUserData.c,v $
 * Revision 1.4  2004/12/20 12:37:13  marceloddm
 * Problem not yet solved
 *
 * Revision 1.3  2004/12/18 02:00:13  marceloddm
 * There is a problem in this function
 *
 * Revision 1.2  2004/12/17 12:09:03  marceloddm
 * The editUserData() function is now complete!
 *
 * Revision 1.1  2004/12/16 00:09:12  marceloddm
 * Initial revision
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <sys/errno.h>
#include "const.h"
#include "types.h"
#include "error.h"
#include "functions.h"
#include "editUserData.h"
#include "config.h"
 
static const char rcsid [] = "$Id: editUserData.c,v 1.4 2004/12/20 12:37:13 marceloddm Exp marceloddm $";
  
unsigned editUserData (userDataType *newData)
{
  unsigned retCode;
  char usersFileName[MAX_LENGTH_LONG_FILENAME +1];
  char tempFileName[MAX_LENGTH_LONG_FILENAME +1];
  FILE *readFile, *writeFile;
  userDataType buffer;
  boolean found;
  
  
  if ((retCode = checkUserData (newData)) != OK)
    return (retCode);

  if ((retCode = getLongFilename (DATA_DIR, USERS_FILE_NAME, usersFileName)) != OK)
    return (retCode);
    
  if ((retCode = getLongFilename (DATA_DIR, USERS_TEMP_FILE_NAME, tempFileName)) != OK)
    return (retCode);

  found = false;

  readFile = fopen (usersFileName, "r");
  if (readFile == NULL)
  {
    if (errno != ENOENT)
      return (EDIT_USER_DATA__ERROR_OPENING_USERS_FILE_FOR_READING);
    return (EDIT_USER_DATA__USERS_FILE_DOES_NOT_EXIST);
  }

  if ((writeFile = fopen (tempFileName, "w")) == NULL)
  { 
    fclose (readFile);  
    return (EDIT_USER_DATA__ERROR_OPENING_TEMP_FILE_FOR_WRITING);  
  }   

  for (retCode = 0; retCode != GET_USER_ID__END_OF_FILE;)  
  {
    if ((retCode = getUserData (readFile, USERS_FILE_NAME, &buffer)) != OK )
    {
      if (retCode != GET_USER_ID__END_OF_FILE)
      {
        fclose (readFile);
        fclose (writeFile);
        remove (tempFileName);
        return (retCode);
      }
    }
    if (retCode != GET_USER_ID__END_OF_FILE)
    {  
      if ((buffer.userId) != (newData->userId))
      {
        if (!strcmp (buffer.name, newData->name))
          if (!(strcmp (buffer.birthday, newData->birthday)))
          {
	    fclose (readFile);
	    fclose (writeFile);
	    remove (tempFileName);
	    return (EDIT_USER_DATA__NAME_AND_BIRTHDAY_ALREADY_EXIST);
	  }
        if (putUserData (writeFile, USERS_TEMP_FILE_NAME, &buffer) != OK )
        {
	  fclose (readFile);
	  fclose (writeFile);
	  remove (tempFileName);
	  return (EDIT_USER_DATA__ERROR_WRITING_IN_TEMP_FILE);
        }     
      }
      if ((buffer.userId) == (newData->userId))
      {
        if (putUserData (writeFile, USERS_TEMP_FILE_NAME, newData) != OK )
        {
	   fclose (readFile);
	   fclose (writeFile);
	   remove (tempFileName);
	   return (EDIT_USER_DATA__ERROR_WRITING_IN_TEMP_FILE);
        }
        found = true; 
      }
    }            
  }

  fclose (readFile);
  fclose (writeFile);
  
  if (!found)
  {
    remove (tempFileName);
    return (EDIT_USER_DATA__USER_NOT_FOUND);   
  }

  rename (tempFileName, usersFileName);

  return (OK);      
}

/*$RCSfile: editUserData.c,v $*/


@


1.4
log
@Problem not yet solved
@
text
@d15 1
a15 1
 * $Date: 2004/12/18 02:00:13 $
d17 3
d43 1
a43 1
static const char rcsid [] = "$Id: editUserData.c,v 1.3 2004/12/18 02:00:13 marceloddm Exp marceloddm $";
a51 1
  char command [2*MAX_LENGTH_LONG_FILENAME +7+1];
a63 1
  snprintf (command, MAX_LENGTH_LONG_FILENAME +6, "rm -f %s", tempFileName); 
d66 2
a67 1
  if ((readFile = fopen (usersFileName, "r")) == NULL)
d88 1
a88 1
        system (command);
d96 1
a96 1
        if (!(strcmp (buffer.name, newData->name)))
d101 1
a101 1
	    system (command);
d104 1
a104 1
        if ((retCode = putUserData (writeFile, USERS_TEMP_FILE_NAME, &buffer)) != OK )
d108 1
a108 1
	  system (command);
d114 1
a114 1
        if ((retCode = putUserData (writeFile, USERS_TEMP_FILE_NAME, newData)) != OK )
d118 1
a118 1
	   system (command);
d125 4
d131 1
a131 3
    fclose (readFile);
    fclose (writeFile);
    system (command);
d133 3
a135 8
  }  
  else  
  {
    fclose (readFile);
    fclose (writeFile);
    snprintf (command, 2*MAX_LENGTH_LONG_FILENAME +7, "mv -f %s %s", tempFileName, usersFileName);
    system (command);
  }  
@


1.3
log
@There is a problem in this function
@
text
@d15 1
a15 1
 * $Date: 2004/12/17 12:09:03 $
d17 3
d40 1
a40 1
static const char rcsid [] = "$Id: editUserData.c,v 1.2 2004/12/17 12:09:03 marceloddm Exp marceloddm $";
d42 1
a42 1
unsigned editUserData ( userDataType * newData )
d45 3
a47 3
  char usersFileName [MAX_LENGTH_LONG_FILENAME+1];
  char tempFileName [MAX_LENGTH_LONG_FILENAME+1];
  FILE *readFile , *writeFile;
d49 1
a49 1
  char command [2*MAX_LENGTH_LONG_FILENAME+1+7];
d52 2
a53 2

  if (( retCode = checkUserData ( newData )) != OK )
d56 1
a56 1
  if (( retCode = getLongFilename ( DATA_DIR , USERS_FILE_NAME , usersFileName )) != OK )
d59 1
a59 1
  if (( retCode = getLongFilename ( DATA_DIR , USERS_TEMP_FILE_NAME , tempFileName )) != OK )
d62 1
a62 1
  snprintf ( command, MAX_LENGTH_LONG_FILENAME+6, "rm -f %s", tempFileName ); 
d64 2
a65 2
        printf ("oi1\n");
  if ((readFile = fopen ( usersFileName , "r" )) == NULL)
d67 3
a69 4
    printf ("meio\n");
   /* if (errno != ENOENT)
      return ( EDIT_USER_DATA__ERROR_OPENING_USERS_FILE_FOR_READING );*/
    return ( EDIT_USER_DATA__USERS_FILE_DOES_NOT_EXIST );
d71 2
a72 2
        printf ("oi2\n");
  if ((writeFile = fopen ( tempFileName , "w" )) == NULL)
d74 2
a75 2
    fclose ( readFile );  
    return ( EDIT_USER_DATA__ERROR_OPENING_TEMP_FILE_FOR_WRITING );  
d78 1
a78 1
  for( retCode = 0 ; retCode != GET_USER_ID__END_OF_FILE ; )  
d80 1
a80 1
    if (( retCode = getUserData ( readFile , USERS_FILE_NAME , &buffer )) != OK )
d84 4
a87 4
        fclose ( readFile );
        fclose ( writeFile );
        system ( command );
        return ( retCode );
d90 1
a90 1
    if ( retCode != GET_USER_ID__END_OF_FILE )
d94 2
a95 2
        if (!(strcmp( buffer.name, newData->name )))
          if (!(strcmp( buffer.birthday, newData->birthday)))
d97 4
a100 4
	    fclose( readFile );
	    fclose( writeFile );
	    system( command );
	    return( EDIT_USER_DATA__NAME_AND_BIRTHDAY_ALREADY_EXIST );
d102 1
a102 1
        if (( retCode = putUserData ( writeFile , USERS_TEMP_FILE_NAME , &buffer ) ) != OK )
d104 4
a107 4
	  fclose( readFile );
	  fclose( writeFile );
	  system( command );
	  return( EDIT_USER_DATA__ERROR_WRITING_IN_TEMP_FILE );
d112 1
a112 1
        if (( retCode = putUserData ( writeFile , USERS_TEMP_FILE_NAME , newData ) ) != OK )
d114 4
a117 4
	   fclose( readFile );
	   fclose( writeFile );
	   system( command );
	   return( EDIT_USER_DATA__ERROR_WRITING_IN_TEMP_FILE );
d123 1
a123 1
  if ( found == false )
d125 4
a128 4
    fclose( readFile );
    fclose( writeFile );
    system( command );
    return( EDIT_USER_DATA__USER_NOT_FOUND );   
d132 4
a135 4
    fclose( readFile );
    fclose( writeFile );
    snprintf( command, 2*MAX_LENGTH_LONG_FILENAME+7, "mv -f %s %s", tempFileName, usersFileName );
    system ( command );
d138 1
a138 1
  return( OK );      
@


1.2
log
@The editUserData() function is now complete!
@
text
@d15 1
a15 1
 * $Date: 2004/12/16 00:09:12 $
d17 3
d26 1
a26 1
#include <stlib.h>
d32 1
d35 1
d37 1
a37 1
static const char rcsid [] = "$Id: editUserData.c,v 1.1 2004/12/16 00:09:12 marceloddm Exp marceloddm $";
d42 3
a44 3
  usersFileName [MAX_LENGTH_LONG_FILENAME+1];
  tempFileName [MAX_LENGTH_LONG_FILENAME+1];
  FILE * readFile , * writeFile;
d49 1
d52 1
a52 1
  
d58 1
a58 1
  
d61 2
a62 2
        
  if (!(readFile = fopen ( usersFileName , "r" )))
d64 3
a66 2
    if (errno != ENOENT)
      return ( EDIT_USER_DATA__ERROR_OPENING_USERS_FILE_FOR_READING );
d69 2
a70 2
  
  if (!(writeFile = fopen ( tempFileName , "w" )))
d75 1
a75 1
 
d135 1
@


1.1
log
@Initial revision
@
text
@d15 5
a19 2
 * $Date$
 * $Log$
d22 9
a30 7
#include<stdio.h>
#include<stlib.h>
#include<string.h>
#include"const.h"
#include"types.h"
#include"functions.h"
#include"editUserData.h"
d32 1
a32 1
static const char rcsid [] = "$Id$";
d41 1
a41 1
  char command [MAX_LENGTH_LONG_FILENAME+1+6];
d57 5
a61 1
    return ( EDIT_USER_DATA__ERROR_OPENING_USERS_FILE );
d66 1
a66 1
    return ( EDIT_USER_DATA__ERROR_OPENING_TEMP_FILE );  
d72 1
d77 1
d80 14
a93 4
    if ((buffer.userId) != (newData->userId))
    {
      if (!(strcmp( buffer.name, newData->name )))
        if (!(strcmp( buffer.birthday, newData->birthday)))
a97 7
	  return( EDIT_USER_DATA__NAME_AND_BIRTHDAY_ALREADY_EXIST );
	}
      if (( retCode = putUserData ( writeFile , USERS_TEMP_FILE_NAME , &buffer ) ) != OK )
      {
	  fclose( readFile );
	  fclose( writeFile );
	  system( command );
d99 3
a101 5
      }     
    }
    if ((buffer.userId) == (newData->userId))
    {
      if (( retCode = putUserData ( writeFile , USERS_TEMP_FILE_NAME , newData ) ) != OK )
d103 8
a110 4
	  fclose( readFile );
	  fclose( writeFile );
	  system( command );
	  return( EDIT_USER_DATA__ERROR_WRITING_IN_TEMP_FILE );
a111 1
      found = true; 
d114 15
a128 5
  if (   
    
    
    
    
d131 1
a131 1
/*$RCSfile$*/
@
