head	1.7;
access;
symbols;
locks
	marceloddm:1.7; strict;
comment	@ * @;


1.7
date	2005.02.16.22.11.21;	author marceloddm;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.20.12.49.02;	author marceloddm;	state Exp;
branches;
next	1.5;

1.5
date	2004.12.16.00.17.17;	author marceloddm;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.15.01.33.26;	author marceloddm;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.14.02.47.18;	author marceloddm;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.13.15.59.57;	author marceloddm;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.13.07.56.07;	author marceloddm;	state Exp;
branches;
next	;


desc
@install() primary function source file
@


1.7
log
@CGI's added
@
text
@//=================================================================//
// Universidade Federal do Rio de Janeiro
// Escola Politécnica
// Departamento de Eletrônica e de Computação
// Professor Marcelo Luiz Drumond Lanza
// Computation II - Class 2004/2
// Authors: Carlo Fragni and Marcelo Duffles Donato Moreira 
// Description: install() primary function source file 
// Date: 11/12/2004
//=================================================================//

/* 
 * RCS COMMENTS
 *
 * $Date: 2004/12/20 12:49:02 $
 * $Log: install.c,v $
 * Revision 1.6  2004/12/20 12:49:02  marceloddm
 * Some corrections have been done: fclose() has been added in some parts of the code
 *
 * Revision 1.5  2004/12/16 00:17:17  marceloddm
 * The checkUserData() returned to the code
 *
 * Revision 1.4  2004/12/15 01:33:26  marceloddm
 * The function does not check fields any more
 *
 * Revision 1.3  2004/12/14 02:47:18  marceloddm
 * This function is now complete.
 * It's time to test it.
 *
 * Revision 1.2  2004/12/13 15:59:57  marceloddm
 * Updated with putUserData() function
 *
 * Revision 1.1  2004/12/13 07:56:07  marceloddm
 * Initial revision
 *
 */


#include <stdio.h>
#include <sys/errno.h>
#include <errno.h>
#include "functions.h"
#include "types.h"
#include "error.h"
#include "const.h"
#include "config.h"


unsigned install (userDataType *userData)
{
  unsigned errorCode;
  FILE *passwordFile, *usersFile, *friendsFile, *parentsFile, *inFile, *outFile;
  char passwordFilename[MAX_LENGTH_LONG_FILENAME +1];
  char usersFilename[MAX_LENGTH_LONG_FILENAME +1];
  char friendsFilename[MAX_LENGTH_LONG_FILENAME +1];
  char parentsFilename[MAX_LENGTH_LONG_FILENAME +1];
  char inFilename[MAX_LENGTH_LONG_FILENAME +1];
  char outFilename[MAX_LENGTH_LONG_FILENAME +1];
  char tempInFilename[20 +4 +1];
  char tempOutFilename[20 +5 +1]; 
  
  if (userData == NULL)
    return (INSTALL__INVALID_USER_DATA);
    
  if ((errorCode = checkUserData (userData)) != OK)
    return (errorCode);
    
/*---------------------------------------------------------------------------------------------------------*/

  if ((errorCode = getLongFilename (DATA_DIR, PASSWORD_FILE_NAME, passwordFilename)) != OK)
    return (errorCode);
   
  if ((passwordFile = fopen (passwordFilename, "r")) != NULL)
  {
    fclose (passwordFile);
    return (INSTALL__SYSTEM_ALREADY_INSTALLED);
  }
    
  if (errno != ENOENT)
    return (INSTALL__ERROR_READING_PASSWORD_FILE);
    
  if ((passwordFile = fopen (passwordFilename, "w")) == NULL)
    return (INSTALL__ERROR_OPENING_PASSWORD_FILE_FOR_WRITING);
    
  if ((errorCode = putUserData (passwordFile, PASSWORD_FILE_NAME, userData)) != OK)
  {
    fclose (passwordFile);  
    return (errorCode);
  }
    
  fclose (passwordFile);  
  
/*---------------------------------------------------------------------------------------------------------*/
  
  if ((errorCode = getLongFilename (DATA_DIR, USERS_FILE_NAME, usersFilename)) != OK)
    return (errorCode);
  
  if ((usersFile = fopen (usersFilename, "r")) != NULL)
  {
    fclose (usersFile);
    return (INSTALL__SYSTEM_ALREADY_INSTALLED);
  }
  
  if (errno != ENOENT)
    return (INSTALL__ERROR_READING_USERS_FILE);
    
  if ((usersFile = fopen (usersFilename, "w")) == NULL)
    return (INSTALL__ERROR_OPENING_USERS_FILE_FOR_WRITING); 
    
  if ((errorCode = putUserData (usersFile, USERS_FILE_NAME, userData)) != OK)
  {
    fclose (usersFile);
    return (errorCode);
  }
      
  fclose (usersFile);
  
/*---------------------------------------------------------------------------------------------------------*/ 
    
  if ((errorCode = getLongFilename (DATA_DIR, PARENTS_FILE_NAME, parentsFilename)) != OK)
    return (errorCode);
  
  if ((parentsFile = fopen (parentsFilename, "r")) != NULL)
  {
    fclose (parentsFile);
    return (INSTALL__SYSTEM_ALREADY_INSTALLED);
  }
  
  if (errno != ENOENT)
    return (INSTALL__ERROR_READING_PARENTS_FILE);
    
  if ((parentsFile = fopen (parentsFilename, "w")) == NULL)
    return (INSTALL__ERROR_OPENING_PARENTS_FILE_FOR_WRITING); 
    
  fclose (parentsFile);
  
/*---------------------------------------------------------------------------------------------------------*/ 
  if ((errorCode = getLongFilename (DATA_DIR, FRIENDS_FILE_NAME, friendsFilename)) != OK)
    return (errorCode);
  
  if ((friendsFile = fopen (friendsFilename, "r")) != NULL)
  {
    fclose (friendsFile);
    return (INSTALL__SYSTEM_ALREADY_INSTALLED);
  }
  
  if (errno != ENOENT)
    return (INSTALL__ERROR_READING_FRIENDS_FILE);
    
  if ((friendsFile = fopen (friendsFilename, "w")) == NULL)
    return (INSTALL__ERROR_OPENING_FRIENDS_FILE_FOR_WRITING); 
   
  fclose (friendsFile);
  
/*---------------------------------------------------------------------------------------------------------*/  
  snprintf (tempInFilename, 20 +3 +1, "%020llu.in", userData->userId); 
  if ((errorCode = getLongFilename (DATA_DIR, tempInFilename, inFilename)) != OK)
    return (errorCode);
  if ((inFile = fopen (inFilename, "w")) == NULL)
    return (INSTALL__ERROR_OPENING_IN_FILE_FOR_WRITING);
  fclose (inFile);
  
  snprintf (tempOutFilename, 20 +4 +1, "%020llu.out", userData->userId); 
  if ((errorCode = getLongFilename (DATA_DIR, tempOutFilename, outFilename)) != OK)
    return (errorCode);
  if ((outFile = fopen (outFilename, "w")) == NULL)
    return (INSTALL__ERROR_OPENING_OUT_FILE_FOR_WRITING);
  fclose (outFile);
  
/*---------------------------------------------------------------------------------------------------------*/  
  
  return (OK);
}
@


1.6
log
@Some corrections have been done: fclose() has been added in some parts of the code
@
text
@d15 1
a15 1
 * $Date: 2004/12/16 00:17:17 $
d17 3
d52 1
a52 1
  FILE *passwordFile, *usersFile, *friendsFile, *parentsFile;
d57 4
a60 1
  
d156 16
@


1.5
log
@The checkUserData() returned to the code
@
text
@d15 1
a15 1
 * $Date: 2004/12/15 01:33:26 $
d17 3
a59 2
  {
    printf ("%s\n", showTextErrorMessage (errorCode));
a60 1
  }
d79 3
a81 1
  if ((errorCode = putUserData (passwordFile, "password", userData)) != OK)
d83 1
d104 3
a106 1
  if ((errorCode = putUserData (usersFile, "users", userData)) != OK)
d108 1
@


1.4
log
@The function does not check fields any more
@
text
@d15 1
a15 1
 * $Date: 2004/12/14 02:47:18 $
d17 3
d34 1
d56 6
@


1.3
log
@This function is now complete.
It's time to test it.
@
text
@d15 1
a15 1
 * $Date: 2004/12/13 15:59:57 $
d17 4
d47 1
a47 2

/*---------------------------------------------------------------------------------------------------------*/
a51 3
   if ((errorCode = checkUserData (userData)) != OK)
       return (errorCode);  
       
@


1.2
log
@Updated with putUserData() function
@
text
@d15 1
a15 1
 * $Date: 2004/12/13 07:56:07 $
d17 3
d44 2
a45 1
/*---------------------------------------------------------------------------------------------------------*/  
d51 2
a52 1
/*---------------------------------------------------------------------------------------------------------*/  
d74 1
a74 1
  /*---------------------------------------------------------------------------------------------------------*/
a115 1

d133 1
a133 2
/*---------------------------------------------------------------------------------------------------------*/ 
  
@


1.1
log
@Initial revision
@
text
@d15 5
a19 2
 * $Date$
 * $Log$
d45 2
a46 72
  /*if ((errorCode = checkField (userData->userName, USERNAME_VALID_CHARACTERS, MIN_LENGTH_USERNAME,
                               MAX_LENGTH_USERNAME)) != OK)
    return (errorCode);
    
  if ((errorCode = checkField (userData->plainPass, PASS_VALID_CHARACTERS, MIN_LENGTH_PLAIN_PASS,
                               MAX_LENGTH_PLAIN_PASS)) != OK)
    return (errorCode);
      
  if ((errorCode = checkField (userData->encryptedPass, PASS_VALID_CHARACTERS, ENCRYPTED_PASS_LENGTH,
                               ENCRYPTED_PASS_LENGTH)) != OK)
    return (errorCode);
      
  if ((errorCode = checkField (userData->name, NAME_VALID_CHARACTERS, MIN_LENGTH_NAME,
                               MAX_LENGTH_NAME)) != OK)
    return (errorCode);
    
  if ((errorCode = checkField (userData->email, EMAIL_VALID_CHARACTERS, MIN_LENGTH_EMAIL,
  			       MAX_LENGTH_EMAIL)) != OK)
    return (errorCode);
    
  if ((errorCode = checkField (userData->homepage, HOMEPAGE_VALID_CHARACTERS, MIN_LENGTH_HOMEPAGE,
  			       MAX_LENGTH_HOMEPAGE)) != OK)
    return (errorCode);
    
  if ((errorCode = checkField (userData->telNumber, TEL_NUMBER_VALID_CHARACTERS, MIN_LENGTH_TEL_NUMBER,
  			       MAX_LENGTH_TEL_NUMBER)) != OK)
    return (errorCode);
      
  if ((errorCode = checkField (userData->cellNumber, CELL_NUMBER_VALID_CHARACTERS, MIN_LENGTH_CELL_NUMBER,
  			       MAX_LENGTH_CELL_NUMBER)) != OK)
    return (errorCode);  
    
  if ((errorCode = checkField (userData->birthday, BIRTHDAY_VALID_CHARACTERS, MIN_LENGTH_BIRTHDAY,
  			       MAX_LENGTH_BIRTHDAY)) != OK)
    return (errorCode);  
    
  if ((errorCode = checkField (userData->description, DESCRIPTION_VALID_CHARACTERS,
  			       MIN_LENGTH_DESCRIPTION, MAX_LENGTH_DESCRIPTION)) != OK)
    return (errorCode);  
    
  if ((errorCode = checkField (userData->address.street, STREET_VALID_CHARACTERS, MIN_LENGTH_STREET,
  			       MAX_LENGTH_STREET)) != OK)
    return (errorCode);  
    
  if ((errorCode = checkField (userData->address.homeNumber, HOME_NUMBER_VALID_CHARACTERS,
  			       MIN_LENGTH_HOME_NUMBER, MAX_LENGTH_HOME_NUMBER)) != OK)
    return (errorCode);  
    
  if ((errorCode = checkField (userData->address.complement, COMPLEMENT_VALID_CHARACTERS,
  			       MIN_LENGTH_COMPLEMENT, MAX_LENGTH_COMPLEMENT)) != OK)
    return (errorCode);  
   
  if ((errorCode = checkField (userData->address.district, DISTRICT_VALID_CHARACTERS,
  			       MIN_LENGTH_DISTRICT, MAX_LENGTH_DISTRICT)) != OK)
    return (errorCode);  
    
  if ((errorCode = checkField (userData->address.city, CITY_VALID_CHARACTERS,
  			       MIN_LENGTH_CITY, MAX_LENGTH_CITY)) != OK)
    return (errorCode);  
   
  if ((errorCode = checkField (userData->address.state, STATE_VALID_CHARACTERS,
  			       MIN_LENGTH_STATE, MAX_LENGTH_STATE)) != OK)
    return (errorCode);  
    
  if ((errorCode = checkField (userData->address.country, COUNTRY_VALID_CHARACTERS,
  			       MIN_LENGTH_COUNTRY, MAX_LENGTH_COUNTRY)) != OK)
    return (errorCode);  
    
  if ((errorCode = checkField (userData->address.zipCode, ZIP_CODE_VALID_CHARACTERS,
  			       MIN_LENGTH_ZIP_CODE, MAX_LENGTH_ZIP_CODE)) != OK)
    return (errorCode);  
    */
d63 2
a64 4
  /*
  if ((errorCode = putUserId (passwordFile, &(userData->userId))) != OK)
  {
    fclose (passwordFile);
d66 1
a66 13
  }
  
  if ((errorCode = putString (passwordFile, MIN_LENGTH_USERNAME, MAX_LENGTH_USERNAME, userData->userName)) != OK)
  {
    fclose (passwordFile);
    return (errorCode);
  }
  
  if ((errorCode = putString (passwordFile, ENCRYPTED_PASS_LENGTH, ENCRYPTED_PASS_LENGTH, userData->encryptedPass)) != OK)
  {
    fclose (passwordFile);
    return (errorCode);
  }*/
d85 2
a86 4
   /* 
  if ((errorCode = putUserId (usersFile, &(userData->userId))) != OK)
  {
    fclose (usersFile);
d88 1
a88 110
  }
  
  if ((errorCode = putUserCategory (usersFile, &(userData->category))) != OK)
  {
    fclose (usersFile);
    return (errorCode);
  }
  
  if ((errorCode = putString (usersFile, MIN_LENGTH_NAME, MAX_LENGTH_NAME, userData->name)) != OK)
  {
    fclose (usersFile);
    return (errorCode);
  }

  if ((errorCode = putString (usersFile, MIN_LENGTH_EMAIL, MAX_LENGTH_EMAIL, userData->email)) != OK)
  {
    fclose (usersFile);
    return (errorCode);
  }
   
  if ((errorCode = putString (usersFile, MIN_LENGTH_HOMEPAGE, MAX_LENGTH_HOMEPAGE, userData->homepage)) != OK)
  {
    fclose (usersFile);
    return (errorCode);
  }
  
  if ((errorCode = putString (usersFile, MIN_LENGTH_STREET, MAX_LENGTH_STREET, userData->address.street)) != OK)
  {
    fclose (usersFile);
    return (errorCode);
  }
  
  if ((errorCode = putString (usersFile, MIN_LENGTH_HOME_NUMBER, MAX_LENGTH_HOME_NUMBER, userData->address.homeNumber)) != OK)
  {
    fclose (usersFile);
    return (errorCode);
  }
  
  if ((errorCode = putString (usersFile, MIN_LENGTH_COMPLEMENT, MAX_LENGTH_COMPLEMENT, userData->address.complement)) != OK)
  {
    fclose (usersFile);
    return (errorCode);
  }
  
  if ((errorCode = putString (usersFile, MIN_LENGTH_DISTRICT, MAX_LENGTH_DISTRICT, userData->address.district)) != OK)
  {
    fclose (usersFile);
    return (errorCode);
  }
  
  if ((errorCode = putString (usersFile, MIN_LENGTH_CITY, MAX_LENGTH_CITY, userData->address.city)) != OK)
  {
    fclose (usersFile);
    return (errorCode);
  }
  
  if ((errorCode = putString (usersFile, MIN_LENGTH_STATE, MAX_LENGTH_STATE, userData->address.state)) != OK)
  {
    fclose (usersFile);
    return (errorCode);
  }
  
  if ((errorCode = putString (usersFile, MIN_LENGTH_COUNTRY, MAX_LENGTH_COUNTRY, userData->address.country)) != OK)
  {
    fclose (usersFile);
    return (errorCode);
  }  
  
  if ((errorCode = putString (usersFile, MIN_LENGTH_ZIP_CODE, MAX_LENGTH_ZIP_CODE, userData->address.zipCode)) != OK)
  {
    fclose (usersFile);
    return (errorCode);
  }  
  
  if ((errorCode = putString (usersFile, MIN_LENGTH_TEL_NUMBER, MAX_LENGTH_TEL_NUMBER, userData->telNumber)) != OK)
  {
    fclose (usersFile);
    return (errorCode);
  }
  
  if ((errorCode = putString (usersFile, MIN_LENGTH_CELL_NUMBER, MAX_LENGTH_CELL_NUMBER, userData->cellNumber)) != OK)
  {
    fclose (usersFile);
    return (errorCode);
  }
  
  if ((errorCode = putUserGender (usersFile, &(userData->gender))) != OK)
  {
    fclose (usersFile);
    return (errorCode);
  }
  
  if ((errorCode = putUserRelationshipStatus (usersFile, &(userData->relationshipStatus))) != OK)
  {
    fclose (usersFile);
    return (errorCode);
  }
  
  if ((errorCode = putString (usersFile, MIN_LENGTH_BIRTHDAY, MAX_LENGTH_BIRTHDAY, userData->birthday)) != OK)
  {
    fclose (usersFile);
    return (errorCode);
  }
  
  if ((errorCode = putString (usersFile, MIN_LENGTH_DESCRIPTION, MAX_LENGTH_DESCRIPTION, userData->description)) != OK)
  {
    fclose (usersFile);
    return (errorCode);
  }*/
  
d129 1
@
